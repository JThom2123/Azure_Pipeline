CURRENT DEPLOYED STAGE:

https://n0dkxjq6pf.execute-api.us-east-1.amazonaws.com/dev1

Note: Ignore the requestContext field, that's not relevant when making the request. You just need what's inside the field.



ABOUT PAGE 

/about

    GET:
        Description: No expected params, returns all rows of about page table. Reference DB if new sections are added. Need to parse the pody to get a specific section.

        Expected Call:
        {
        "requestContext": {
            "http": {
            "method": "GET",
            "path": "/dev1/about"
            }
        }
        }

        Expected response:
        {
        "statusCode": 200,
        "body": "[{\"section_name\":\"product_description\",\"content\":\"Hi there. Our Product Tracks you. Everywhere. No matter where you go. You cannot escape. No matter what you do. You are now a trucker for life. A mother trucker.\",\"last_updated\":\"2025-02-13T23:04:53.000Z\"},{\"section_name\":\"product_name\",\"content\":\"Mother Trucking Inc.\",\"last_updated\":\"2025-02-13T22:58:03.000Z\"},{\"section_name\":\"release_date\",\"content\":\"2/26/2025\",\"last_updated\":\"2025-02-26T05:34:41.000Z\"},{\"section_name\":\"team_number\",\"content\":\"22\",\"last_updated\":\"2025-02-13T22:53:08.000Z\"},{\"section_name\":\"version_number\",\"content\":\"0.0.2\",\"last_updated\":\"2025-02-26T05:35:33.000Z\"}]",
        "headers": {
            "Content-Type": "application/json"
        }
        }

/user

    GET:
        Not yet implemented - will return a list of all users, with the option to filter by user type

    PATCH:
        Description: Allows the call to change the user. Includes a request body.
        Path: /dev1/user
        Usage: XXX.com/dev1/user

        Request:
            {
            "requestContext": {
                "http": {
                "method": "PATCH",
                "path": "/dev1/user"
                }
            },
            "body": "{\"email\": \"newuser@example.com\", \"userType\": \"sponsor\"}"
            }

        Expected Response:
            {
            "statusCode": 200,
            "body": "{\"message\":\"User updated successfully\"}",
            "headers": {
                "Content-Type": "application/json"
            }
            }

    POST:
        Description: Creates a new user and puts them in the database. This includes a request body.
        PATH: /dev1/user
        Usage: XXX.com/dev1/user

        Request: 
            {
            "requestContext": {
                "http": {
                "method": "POST",
                "path": "/dev1/user"
                }
            },
            "body": "{\"email\": \"newuser1@example.com\", \"userType\": \"driver\"}"
            }

        Expected Response:
            {
            "statusCode": 201,
            "body": "{\"message\":\"newuser1@example.com created successfully\"}",
            "headers": {
                "Content-Type": "application/json"
            }
            }


/user/{email}

    GET:
        Description: Gets information about a specific user

        PATH: /dev1/user/{email}

        Request:
            {
            "requestContext": {
                "http": {
                "method": "GET",
                "path": "/dev1/user/newuser@example.com"
                }
            }
            }

        Expected response:
            {
            "statusCode": 200,
            "body": "[{\"userID\":null,\"userType\":\"driver\",\"email\":\"newuser@example.com\"}]",
            "headers": {
                "Content-Type": "application/json"
            }
            }

    DELETE:
        Description: Deletes a specific user
        PATH: /dev1/user/{email}
        Usage: XXX.com/dev1/user/newuser@example.com

        Request:
            {
            "requestContext": {
                "http": {
                "method": "DELETE",
                "path": "/dev1/user/newuser@example.com"
                }
            }
            }

        Expected Response:
            {
            "statusCode": 200,
            "body": "{\"message\":\"User deleted successfully\"}",
            "headers": {
                "Content-Type": "application/json"
            }
            }


/user/points

    GET:
        Description: Uses a path query to get total points from a specific user
        PATH: /dev1/user/points
        Query Parameters: email=newuser@example.com, organization=ExampleOrg
        Usage: /dev1/user/points?email=newuser@example.com&organization=ExampleOrg

        Request:
            {
            "requestContext": {
                "http": {
                "method": "GET",
                "path": "/dev1/user/points"
                }
            },
            "queryStringParameters": {
                "email": "newuser@example.com",
                "organization": "ExampleOrg"
            }
            }


        Expected Response:
            {
            "statusCode": 200,
            "body": "{\"email\":\"newuser@example.com\",\"organization\":\"ExampleOrg\",\"totalPoints\":\"30\"}",
            "headers": {
                "Content-Type": "application/json"
            }
            }

    POST:
        Description: Uses a request body to post a point adjustment to a user. The adjustment can be positive or negative.
        PATH: /dev1/user/points
        Usage: XXX.com/dev1/user/points

        Request:
            {
            "requestContext": {
                "http": {
                "method": "POST",
                "path": "/dev1/user/points"
                }
            },
            "body": {
                "email": "newuser@example.com",
                "points": "30",
                "organization": "ExampleOrg",
                "description": "New user registration"
                }
            }


        Expected Response:
            {
            "statusCode": 200,
            "body": "{\"message\":\"points created successfully\"}"
            }

/user/relation

    POST: 
        Description: Uses a request body to add a relationship between to users
        PATH: /dev1/user/relation
        Usage: XXX.com/dev1/user/relation

        Request: 
            {
            "requestContext": {
            "http": {
            "method": "POST",
            "path": "/dev1/user/relation"
            }
            },
            "body": "{\"email1\": \"sponsor@email.com\", \"email2\": \"driver@email.com\", \"relationType\": \"sponsor-driver\"}"
            }

        Expected Response:
        {
        "statusCode": 201,
        "body": "{\"message\":\"Relationship created successfully\"}"
        }
